<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.simon.backstage.dao.VisitorMapper" >
  <resultMap id="BaseResultMap" type="com.simon.backstage.domain.model.Visitor" >
    <id column="visitor_id" property="visitorId" jdbcType="VARCHAR" />
    <result column="community_id" property="communityId" jdbcType="VARCHAR" />
    <result column="building_id" property="buildingId" jdbcType="VARCHAR" />
    <result column="visitor_name" property="visitorName" jdbcType="VARCHAR" />
    <result column="visitor_sex" property="visitorSex" jdbcType="INTEGER" />
    <result column="visitor_phone" property="visitorPhone" jdbcType="VARCHAR" />
    <result column="visitor_cause" property="visitorCause" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <association property="community" javaType="com.simon.backstage.domain.vo.Community">
      <id column="community_id" property="communityId" jdbcType="VARCHAR" />
      <result column="community_no" property="communityNo" jdbcType="VARCHAR" />
      <result column="community_name" property="communityName" jdbcType="VARCHAR" />
    </association>
    <association property="building" javaType="com.simon.backstage.domain.model.Building">
      <id column="building_id" property="buildingId" jdbcType="VARCHAR" />
      <result column="building_name" property="buildingName" jdbcType="VARCHAR" />
      <result column="building_no" property="buildingNo" jdbcType="VARCHAR" />
    </association>
    <collection property="visitorImage" ofType="com.simon.dal.model.Images" javaType="java.util.List" select="selectImages" column="visitor_id">
    </collection>
  </resultMap>
  <sql id="Base_Column_List" >
    v.visitor_id, v.community_id,v.building_id, v.visitor_name, v.visitor_sex, v.visitor_phone, v.visitor_cause,
    v.create_time, v.update_time,
    b.building_id,b.building_name, b.building_no,
    c.community_id,c.community_no,c.community_name
  </sql>
  <resultMap id="Image_Result_Map" type="com.simon.dal.model.Images" >
    <id column="image_id" property="imageId" jdbcType="VARCHAR"/>
    <result column="object_id" property="objectId" jdbcType="VARCHAR"/>
    <result column="image_url" property="imageUrl" jdbcType="VARCHAR"/>
    <result column="image_thumbnail" property="imageThumbnail" jdbcType="VARCHAR"/>
    <result column="image_type" property="imageType" jdbcType="INTEGER"/>
    <result column="img_create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="img_update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <select id="selectImages" parameterType="string" resultMap="Image_Result_Map" >
    select img.image_id, img.image_url, img.image_thumbnail, img.object_id, img.image_type, img.create_time as img_create_time, img.update_time as img_update_time
    from images img
    where img.object_id=#{visitorId} and img.image_type=4
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from visitor v inner join community c on v.community_id=c.community_id
    where v.visitor_id = #{visitorId,jdbcType=VARCHAR}
  </select>
  <select id="selectByCondition" resultMap="BaseResultMap" parameterType="com.simon.dal.vo.BaseClaims" >
    select
    <include refid="Base_Column_List" />
    from visitor v inner join community c on v.community_id=c.community_id
    inner join building b on b.building_id=v.building_id
    <where>
      <if test="keyword!=null and keyword!=''">
        CONCAT(IFNULL(v.visitor_name,''),IFNULL(v.visitor_phone,'')) LIKE CONCAT('%', #{keyword}, '%')
      </if>
      <if test="communityId != null">
      	AND v.community_id = #{communityId,jdbcType=VARCHAR}
      </if>
    </where>
    order by v.create_time desc
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from visitor
    where visitor_id = #{visitorId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.simon.backstage.domain.model.Visitor" >
    insert into visitor (visitor_id, community_id,building_id, visitor_name,
      visitor_sex, visitor_phone, visitor_cause, 
      create_time, update_time)
    values (#{visitorId,jdbcType=VARCHAR}, #{communityId,jdbcType=VARCHAR}, #{buildingId,jdbcType=VARCHAR}, #{visitorName,jdbcType=VARCHAR},
      #{visitorSex,jdbcType=INTEGER}, #{visitorPhone,jdbcType=VARCHAR}, #{visitorCause,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.simon.backstage.domain.model.Visitor" useGeneratedKeys="true" >
    insert into visitor
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="visitorId != null" >
        visitor_id,
      </if>
      <if test="communityId != null" >
        community_id,
      </if>
      <if test="buildingId != null" >
        building_id,
      </if>
      <if test="visitorName != null" >
        visitor_name,
      </if>
      <if test="visitorSex != null" >
        visitor_sex,
      </if>
      <if test="visitorPhone != null" >
        visitor_phone,
      </if>
      <if test="visitorCause != null" >
        visitor_cause,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="visitorId != null" >
        #{visitorId,jdbcType=VARCHAR},
      </if>
      <if test="communityId != null" >
        #{communityId,jdbcType=VARCHAR},
      </if>
      <if test="buildingId != null" >
        #{buildingId,jdbcType=VARCHAR},
      </if>
      <if test="visitorName != null" >
        #{visitorName,jdbcType=VARCHAR},
      </if>
      <if test="visitorSex != null" >
        #{visitorSex,jdbcType=INTEGER},
      </if>
      <if test="visitorPhone != null" >
        #{visitorPhone,jdbcType=VARCHAR},
      </if>
      <if test="visitorCause != null" >
        #{visitorCause,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.simon.backstage.domain.model.Visitor" >
    update visitor
    <set >
      <if test="communityId != null" >
        community_id = #{communityId,jdbcType=VARCHAR},
      </if>
      <if test="buildingId != null" >
        building_id = #{buildingId,jdbcType=VARCHAR},
      </if>
      <if test="visitorName != null" >
        visitor_name = #{visitorName,jdbcType=VARCHAR},
      </if>
      <if test="visitorSex != null" >
        visitor_sex = #{visitorSex,jdbcType=INTEGER},
      </if>
      <if test="visitorPhone != null" >
        visitor_phone = #{visitorPhone,jdbcType=VARCHAR},
      </if>
      <if test="visitorCause != null" >
        visitor_cause = #{visitorCause,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where visitor_id = #{visitorId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.simon.backstage.domain.model.Visitor" >
    update visitor
    set community_id = #{communityId,jdbcType=VARCHAR},
      building_id = #{buildingId,jdbcType=VARCHAR},
      visitor_name = #{visitorName,jdbcType=VARCHAR},
      visitor_sex = #{visitorSex,jdbcType=INTEGER},
      visitor_phone = #{visitorPhone,jdbcType=VARCHAR},
      visitor_cause = #{visitorCause,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where visitor_id = #{visitorId,jdbcType=VARCHAR}
  </update>
</mapper>