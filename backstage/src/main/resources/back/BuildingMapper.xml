<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.simon.backstage.dao.BuildingMapper" >
  <resultMap id="BaseResultMap" type="com.simon.backstage.domain.model.Building" >
    <id column="building_id" property="buildingId" jdbcType="VARCHAR" />
    <result column="community_id" property="communityId" jdbcType="VARCHAR" />
    <result column="building_name" property="buildingName" jdbcType="VARCHAR" />
    <result column="building_no" property="buildingNo" jdbcType="VARCHAR" />
    <result column="full_address" property="fullAddress" jdbcType="VARCHAR" />
    <result column="building_struct" property="buildingStruct" jdbcType="VARCHAR" />
    <result column="building_direction" property="buildingDirection" jdbcType="VARCHAR" />
    <result column="floor_up_num" property="floorUpNum" jdbcType="INTEGER" />
    <result column="floor_low_num" property="floorLowNum" jdbcType="INTEGER" />
    <result column="management_type" property="managementType" jdbcType="INTEGER" />
    <result column="deleted" property="deleted" jdbcType="BIT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <association property="community" javaType="com.simon.backstage.domain.vo.Community">
      <id column="community_id" property="communityId" jdbcType="VARCHAR" />
      <result column="community_no" property="communityNo" jdbcType="VARCHAR" />
      <result column="community_name" property="communityName" jdbcType="VARCHAR" />
    </association>
  </resultMap>

  <resultMap id="CommunityWithBuildingMap" type="com.simon.backstage.domain.vo.CommunityWithBuilding" >
    <id column="community_id" property="communityId" jdbcType="VARCHAR" />
    <result column="community_no" property="communityNo" jdbcType="VARCHAR" />
    <result column="community_name" property="communityName" jdbcType="VARCHAR" />
    <result column="community_management_type" property="communityManagementType" jdbcType="TINYINT" />
    <collection property="buildingWithUnits" ofType="com.simon.backstage.domain.vo.BuildingWithUnit" resultMap="BuildingWithUnitMap">
    </collection>
  </resultMap>
  <resultMap id="BuildingWithUnitMap" type="com.simon.backstage.domain.vo.BuildingWithUnit" >
    <id column="building_id" property="buildingId" jdbcType="VARCHAR" />
    <result column="building_name" property="buildingName" jdbcType="VARCHAR" />
    <result column="building_no" property="buildingNo" jdbcType="VARCHAR" />
    <result column="full_address" property="fullAddress" jdbcType="VARCHAR" />
    <collection property="unitList" ofType="com.simon.backstage.domain.vo.Unit">
      <id column="unit_id" property="unitId" jdbcType="VARCHAR" />
      <result column="unit_name" property="unitName" jdbcType="VARCHAR" />
      <result column="unit_no" property="unitNo" jdbcType="VARCHAR" />
    </collection>
  </resultMap>

  <resultMap id="CommunityWithUnitMap" type="com.simon.backstage.domain.vo.CommunityWithBuilding" >
    <id column="community_id" property="communityId" jdbcType="VARCHAR" />
    <result column="community_no" property="communityNo" jdbcType="VARCHAR" />
    <result column="community_name" property="communityName" jdbcType="VARCHAR" />
    <result column="community_management_type" property="communityManagementType" jdbcType="TINYINT" />
    <collection property="unitList" ofType="com.simon.backstage.domain.vo.Unit">
      <id column="unit_id" property="unitId" jdbcType="VARCHAR" />
      <result column="unit_name" property="unitName" jdbcType="VARCHAR" />
      <result column="unit_no" property="unitNo" jdbcType="VARCHAR" />
    </collection>
  </resultMap>

  <sql id="Base_Column_List" >
    b.building_id, b.community_id, b.building_name, b.building_no, b.full_address, b.building_struct,
    b.building_direction, b.floor_up_num, b.floor_low_num, c.community_management_type as management_type, b.deleted, b.create_time, b.update_time,
    c.community_id,c.community_no,c.community_name
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from building b inner join community c on b.community_id=c.community_id
    where b.building_id = #{buildingId,jdbcType=VARCHAR}
  </select>

  <select id="selectByCondition" resultMap="BaseResultMap" parameterType="com.simon.dal.vo.BaseClaims" >
    select
    <include refid="Base_Column_List" />
    from building b inner join community c on b.community_id=c.community_id
    <where>
      <if test="keyword!=null and keyword!=''">
        CONCAT(IFNULL(b.building_name,'')) LIKE CONCAT('%', #{keyword}, '%')
      </if>
      <if test="communityId != null">
      	AND b.community_id = #{communityId,jdbcType=VARCHAR}
      </if>
    </where>
    order by create_time desc
  </select>
  <select id="communityWithBuildingAndUnit" resultMap="CommunityWithBuildingMap" parameterType="java.lang.String" >
    select
    c.community_id, c.community_no,c.community_name,c.community_management_type,
    b.building_id, b.building_name, b.building_no, b.full_address,
    u.unit_id, u.unit_name, u.unit_no
    from community c
      left join building b on c.community_id=b.community_id
      left join unit u on b.building_id=u.building_id
    <where>
      <if test="communityId != null">
        AND c.community_id = #{communityId,jdbcType=VARCHAR}
      </if>
    </where>
  </select>
  <select id="communityWithUnit" resultMap="CommunityWithUnitMap" parameterType="java.lang.String" >
    select
    c.community_id, c.community_no,c.community_name,c.community_management_type,
    u.unit_id, u.unit_name, u.unit_no
    from community c
      left join unit u on c.community_id = u.community_id AND u.unit_type=3
    <where>
      <if test="communityId != null">
        AND c.community_id = #{communityId,jdbcType=VARCHAR}
      </if>
    </where>
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from building
    where building_id = #{buildingId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.simon.backstage.domain.model.Building" >
    insert into building (building_id, community_id, building_name, 
      building_no, full_address, building_struct, 
      building_direction, floor_up_num, floor_low_num, 
      deleted, create_time, update_time
      )
    values (#{buildingId,jdbcType=VARCHAR}, #{communityId,jdbcType=VARCHAR}, #{buildingName,jdbcType=VARCHAR}, 
      #{buildingNo,jdbcType=VARCHAR}, #{fullAddress,jdbcType=VARCHAR}, #{buildingStruct,jdbcType=VARCHAR}, 
      #{buildingDirection,jdbcType=VARCHAR}, #{floorUpNum,jdbcType=INTEGER}, #{floorLowNum,jdbcType=INTEGER}, 
      #{deleted,jdbcType=BIT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.simon.backstage.domain.model.Building" >
    insert into building
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="buildingId != null" >
        building_id,
      </if>
      <if test="communityId != null" >
        community_id,
      </if>
      <if test="buildingName != null" >
        building_name,
      </if>
      <if test="buildingNo != null" >
        building_no,
      </if>
      <if test="fullAddress != null" >
        full_address,
      </if>
      <if test="buildingStruct != null" >
        building_struct,
      </if>
      <if test="buildingDirection != null" >
        building_direction,
      </if>
      <if test="floorUpNum != null" >
        floor_up_num,
      </if>
      <if test="floorLowNum != null" >
        floor_low_num,
      </if>
      <if test="deleted != null" >
        deleted,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="buildingId != null" >
        #{buildingId,jdbcType=VARCHAR},
      </if>
      <if test="communityId != null" >
        #{communityId,jdbcType=VARCHAR},
      </if>
      <if test="buildingName != null" >
        #{buildingName,jdbcType=VARCHAR},
      </if>
      <if test="buildingNo != null" >
        #{buildingNo,jdbcType=VARCHAR},
      </if>
      <if test="fullAddress != null" >
        #{fullAddress,jdbcType=VARCHAR},
      </if>
      <if test="buildingStruct != null" >
        #{buildingStruct,jdbcType=VARCHAR},
      </if>
      <if test="buildingDirection != null" >
        #{buildingDirection,jdbcType=VARCHAR},
      </if>
      <if test="floorUpNum != null" >
        #{floorUpNum,jdbcType=INTEGER},
      </if>
      <if test="floorLowNum != null" >
        #{floorLowNum,jdbcType=INTEGER},
      </if>
      <if test="deleted != null" >
        #{deleted,jdbcType=BIT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>

  <insert id="insertFloorSelective">
    insert into floor (floor_id,building_id, floor_name, floor_purpose,
    floor_ichnography, floor_sort)values
    <foreach collection="list" item="item" separator=",">
    (
    #{item.floorId},#{item.buildingId},#{item.floorName},#{item.floorPurpose},#{item.floorIchnography},#{item.floorSort}
    )
  </foreach>
  </insert>

  <delete id="delFloorByBuildingId">
    delete from floor where building_id=#{buildingId}
  </delete>

  <insert id="insertBuildingChildSelective">
    insert into building_child (child_id,building_id, tips, `value`,sort)values
    <foreach collection="list" item="item" separator=",">
      (
      #{item.childId},#{item.buildingId},#{item.tips},#{item.value},#{item.sort}
      )
    </foreach>
  </insert>
  <delete id="delBuildingChilds" parameterType="string">
    delete from building_child where building_id=#{buildingId}
  </delete>
  <select id="selectFloorListByBuildingId" resultType="com.simon.backstage.domain.model.Floor" parameterType="java.lang.String" >
    select
    floor_id as floorId,building_id as buildingId, floor_name as floorName, floor_purpose as floorPurpose,floor_ichnography as floorIchnography, floor_sort as floorSort
    from floor
    where building_id = #{buildingId,jdbcType=VARCHAR} order by floor_sort
  </select>
  <select id="selectBuildingChildListByBuildingId" resultType="com.simon.backstage.domain.model.BuildingChild" parameterType="java.lang.String" >
    select
    child_id as childId,building_id as buildingId, tips, `value`,sort,`name`,amount,area,purpose,perthousand
    from building_child
    where building_id = #{buildingId,jdbcType=VARCHAR} order by sort
  </select>
  <update id="updateByPrimaryKeySelective" parameterType="com.simon.backstage.domain.model.Building" >
    update building
    <set >
      <if test="communityId != null" >
        community_id = #{communityId,jdbcType=VARCHAR},
      </if>
      <if test="buildingName != null" >
        building_name = #{buildingName,jdbcType=VARCHAR},
      </if>
      <if test="buildingNo != null" >
        building_no = #{buildingNo,jdbcType=VARCHAR},
      </if>
      <if test="fullAddress != null" >
        full_address = #{fullAddress,jdbcType=VARCHAR},
      </if>
      <if test="buildingStruct != null" >
        building_struct = #{buildingStruct,jdbcType=VARCHAR},
      </if>
      <if test="buildingDirection != null" >
        building_direction = #{buildingDirection,jdbcType=VARCHAR},
      </if>
      <if test="floorUpNum != null" >
        floor_up_num = #{floorUpNum,jdbcType=INTEGER},
      </if>
      <if test="floorLowNum != null" >
        floor_low_num = #{floorLowNum,jdbcType=INTEGER},
      </if>
      <if test="deleted != null" >
        deleted = #{deleted,jdbcType=BIT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where building_id = #{buildingId,jdbcType=VARCHAR}
  </update>
  <update id="updateFloorByPrimaryKeySelective" parameterType="com.simon.backstage.domain.model.Floor" >
    update floor
    <set >
      <if test="floorName != null" >
        floor_name = #{floorName,jdbcType=VARCHAR},
      </if>
      <if test="floorPurpose != null" >
        floor_purpose = #{floorPurpose,jdbcType=VARCHAR},
      </if>
      <if test="floorIchnography != null" >
        floor_ichnography = #{floorIchnography,jdbcType=VARCHAR},
      </if>
      <if test="floorSort != null" >
        floor_sort = #{floorSort,jdbcType=INTEGER},
      </if>
    </set>
    where floor_id = #{floorId,jdbcType=VARCHAR}
  </update>
  <update id="updateBuildingChildByPrimaryKeySelective" parameterType="com.simon.backstage.domain.model.BuildingChild" >
    update building_child
    <set >
      <if test="tips != null" >
        tips = #{tips,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        `name` = #{name},
      </if>
      <if test="amount != null" >
        `amount` = #{amount},
      </if>
      <if test="area != null" >
        `area` = #{area},
      </if>
      <if test="purpose != null" >
        `purpose` = #{purpose},
      </if>
      <if test="perthousand != null" >
        `perthousand` = #{perthousand},
      </if>
      <if test="value != null" >
        `value` = #{value,jdbcType=VARCHAR},
      </if>
      <if test="sort != null" >
        sort = #{sort,jdbcType=INTEGER},
      </if>
    </set>
    where child_id = #{childId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.simon.backstage.domain.model.Building" >
    update building
    set community_id = #{communityId,jdbcType=VARCHAR},
      building_name = #{buildingName,jdbcType=VARCHAR},
      building_no = #{buildingNo,jdbcType=VARCHAR},
      full_address = #{fullAddress,jdbcType=VARCHAR},
      building_struct = #{buildingStruct,jdbcType=VARCHAR},
      building_direction = #{buildingDirection,jdbcType=VARCHAR},
      floor_up_num = #{floorUpNum,jdbcType=INTEGER},
      floor_low_num = #{floorLowNum,jdbcType=INTEGER},
      deleted = #{deleted,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where building_id = #{buildingId,jdbcType=VARCHAR}
  </update>

  <insert id="insertEnclosures">
    insert into enclosure (enclosure_id,object_id, enclosure_url, enclosure_object_type,enclosure_type)values
    <foreach collection="list" item="item" separator=",">
      (
      #{item.enclosureId},#{item.objectId},#{item.enclosureUrl},#{item.enclosureObjectType},#{item.enclosureType}
      )
    </foreach>
  </insert>
  <select id="findUrlFromEnclosure" parameterType="com.simon.backstage.domain.model.Enclosure" resultType="string">
    select
    enclosure_url as url
    from enclosure
    <where>
      <if test="objectId!=null and objectId!=''">
        object_id = #{objectId,jdbcType=VARCHAR}
      </if>
      <if test="enclosureObjectType != null">
        and enclosure_object_type = #{enclosureObjectType,jdbcType=INTEGER}
      </if>
      <if test="enclosureType != null">
        and enclosure_type = #{enclosureType,jdbcType=INTEGER}
      </if>
    </where>
  </select>

  <delete id="delEnclosure">
    delete from enclosure
    where object_id = #{objectId,jdbcType=VARCHAR} and enclosure_object_type = #{enclosureObjectType,jdbcType=INTEGER}
  </delete>


  <resultMap id="PartOfCommunityResultMap" type="com.simon.backstage.domain.model.BuildingPart" >
    <id column="building_id" property="buildingId" jdbcType="VARCHAR" />
    <result column="building_name" property="buildingName" jdbcType="VARCHAR" />
    <result column="building_no" property="buildingNo" jdbcType="VARCHAR" />
    <collection property="buildingChildList" ofType="com.simon.backstage.domain.model.BuildingChild">
      <id column="childId" property="childId"/>
      <result column="building_id" property="buildingId" jdbcType="VARCHAR" />
      <result column="tips" property="tips" jdbcType="VARCHAR" />
      <result column="value" property="value" jdbcType="VARCHAR" />
      <result column="sort" property="sort" jdbcType="VARCHAR" />
      <result column="name" property="name" jdbcType="VARCHAR" />
      <result column="amount" property="amount" jdbcType="INTEGER" />
      <result column="area" property="area" jdbcType="DECIMAL" />
      <result column="purpose" property="purpose" jdbcType="VARCHAR" />
      <result column="perthousand" property="perthousand" jdbcType="DECIMAL" />
    </collection>
  </resultMap>

  <select id="buildPartOfCommunity" resultMap="PartOfCommunityResultMap">
    select
    child_id as childId,bc.building_id as buildingId, tips, `value`,sort,`name`,amount,area,purpose,perthousand,
    building_name as buildingName,building_no as buildingNo
    from building_child bc inner join building b on bc.building_id = b.building_id
    where
  </select>
</mapper>